akka {
  loglevel = DEBUG
}

# special config for each actor [NAME SPACE]
mySpecialConfig {
  akka {
    loglevel = INFO
  }
}

# For time assertion test config
specialTimeAssertionConfig {
  akka.test.single-expect-default = 0.3s
}

# intercepting log messages
interceptingLogMessages {
  akka {
    loggers = ["akka.testkit.TestEventListener"]
    test {
      filter-leeway = 5s
    }
  }
}

# Routers demo
routersDemo {
  akka {
    actor.deployment {
      /poolMaster2 {
        router = round-robin-pool
        nr-of-instances = 5
      }

      /groupMaster2 {
        router = round-robin-group
        routees.paths = ["/user/slave_1","/user/slave_2","/user/slave_3","/user/slave_4","/user/slave_5"]
      }
    }
  }
}


# Dispatchers demo

my-dispatcher {
  type = Dispatcher # PinnedDispatcher which bind each actor to one thread on pool that circle around ||| CallingThreadDispatcher all invocation and all communication with an actor happens in a calling thread
  executor = "thread-pool-executor" # we can use any thread service
  thread-pool-executor {
    fixed-pool-size = 1 # number of thread for executor
  }
  throughput = 30 # number of msg that a dispatcher can handle for one actor until move to other actor
}

# method two to attach dispatcher
dispatchersDemo {
  akka.actor.deployment { # akka deployment type
    /rtjvm { // actor path
      dispatcher = my-dispatcher # for this actor attach this dispatcher
    }
  }
}

# Mailbox configuration


# mailbox controller case 2
mailboxesDemo {
  # special dispatcher for mailbox

  support-ticket-dispatcher {
    mailbox-type = "part5infra.Mailboxes$SupportTicketPriorityMailbox" # full name of the mailbox dispatcher class $ means internal class to mailboxes
  }

  control-mailbox {
    mailbox-type = "akka.dispatch.UnboundedControlAwareMailbox"
  }
  # altControlAwareACTOR
  akka.actor.deplyment {
    /altControlAwareActor {
      mailbox = control-mailbox
    }

  }

}
